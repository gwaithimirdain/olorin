export const LEVELS = [
    { name: "Proposition world",
      stages: [
          { name: "",
            rules: [],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P" } ],
                    conclusion: { ty: "P" },
                    trivial: true,
                    hint: "wiresHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P" }, { ty: "Q" } ],
                    conclusion: { ty: "Q" },
                    trivial: true,
                    hint: "muxHint",
                },
            ],
          },
          { name: "∧",
            rules: [ "andI", "andE" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P" }, { ty: "Q" } ],
                    conclusion: { ty: "P∧Q" },
                    trivial: true,
                    hint: "introHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P" } ],
                    conclusion: { ty: "P∧P" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧Q" } ],
                    conclusion: { ty: "P" },
                    trivial: true,
                    hint: "elimHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧Q" } ],
                    conclusion: { ty: "Q" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧Q" } ],
                    conclusion: { ty: "Q∧P" },
                    hint: "multiHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∧Q)∧R" } ],
                    conclusion: { ty: "P∧R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∧Q)∧R" } ],
                    conclusion: { ty: "P∧(Q∧R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧(Q∧R)" } ],
                    conclusion: { ty: "(P∧Q)∧R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" }, { name: "S", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∧Q)∧(R∧S)" } ],
                    conclusion: { ty: "R∧(S∧Q)" },
                },
            ]
          },
          { name: "⇒",
            rules: [ "impE", "impI" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, { ty: "P" } ],
                    conclusion: { ty: "Q" },
                    trivial: true,
                    hint: "impHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "P⇒P" },
                    trivial: true,
                    hint: "bracketHint",
                },
                // {
                //                 parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                //                 variables: [ ],
                //                 hypotheses: [ { ty: "Q" } ],
                //                 conclusion: { ty: "P⇒Q" },
                // },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "P⇒(Q⇒P)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, { ty: "Q⇒R" } ],
                    conclusion: { ty: "P⇒R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒(P⇒Q)" } ],
                    conclusion: { ty: "P⇒Q" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" }, { name: "S", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, { ty: "P⇒R" }, { ty: "Q⇒S" }, { ty: "R⇒S" }, ],
                    conclusion: { ty: "P⇒S" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒(Q⇒R)" }, ],
                    conclusion: { ty: "Q⇒(P⇒R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, ],
                    conclusion: { ty: "(Q⇒R)⇒(P⇒R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, ],
                    conclusion: { ty: "(R⇒P)⇒(R⇒Q)" },
                },
            ]
          },
          { name: "∧⇒",
            rules: [ "andE", "andI", "impE", "impI" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒R" }, { ty: "Q⇒R" } ],
                    conclusion: { ty: "(P∧Q)⇒R" },
                    hint: "headHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P⇒Q)∧(P⇒R)" }, ],
                    conclusion: { ty: "P⇒(Q∧R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒(Q∧R)" }, ],
                    conclusion: { ty: "(P⇒Q)∧(P⇒R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒(Q⇒R)" }, ],
                    conclusion: { ty: "(P∧Q)⇒R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∧Q)⇒R" }, ],
                    conclusion: { ty: "P⇒(Q⇒R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" }, { name: "S", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, { ty: "R⇒S" }, ],
                    conclusion: { ty: "(P∧R)⇒(Q∧S)" },
                },
            ]
          },
          { name: "∨",
            rules: [ "orE", "orI1", "orI2" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P" } ],
                    conclusion: { ty: "P∨Q" },
                    trivial: true,
                    hint: "orHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "Q" } ],
                    conclusion: { ty: "P∨Q" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P" } ],
                    conclusion: { ty: "P∨P" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∨P" } ],
                    conclusion: { ty: "P" },
                    hint: "casesHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∨Q" } ],
                    conclusion: { ty: "Q∨P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∨Q)∨R" } ],
                    conclusion: { ty: "P∨(Q∨R)" },
                    hint: "casesGoalHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∨(Q∨R)" } ],
                    conclusion: { ty: "(P∨Q)∨R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" }, { name: "S", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "R∨(S∨Q)" } ],
                    conclusion: { ty: "(P∨Q)∨(R∨S)" },
                },
            ]
          },
          { name: "∧∨",
            rules: [ "andE", "andI", "orE", "orI1", "orI2" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧Q" } ],
                    conclusion: { ty: "P∨Q" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∨(Q∧P)" } ],
                    conclusion: { ty: "P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧(Q∨R)" } ],
                    conclusion: { ty: "(P∧Q)∨R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧(Q∨R)" } ],
                    conclusion: { ty: "(P∧Q)∨(P∧R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∧Q)∨(P∧R)" } ],
                    conclusion: { ty: "P∧(Q∨R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∨(Q∧R)" } ],
                    conclusion: { ty: "(P∨Q)∧(P∨R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∨Q)∧(P∨R)" } ],
                    conclusion: { ty: "P∨(Q∧R)" },
                },
            ]
          },
          { name: "∧∨⇒",
            rules: [ "andE", "andI", "impE", "impI", "orE", "orI1", "orI2" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P⇒R)∧(Q⇒R)" } ],
                    conclusion: { ty: "(P∨Q)⇒R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∨Q)⇒R" } ],
                    conclusion: { ty: "(P⇒R)∧(Q⇒R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P⇒R)∨(Q⇒R)" } ],
                    conclusion: { ty: "(P∧Q)⇒R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P⇒Q)∨(P⇒R)" } ],
                    conclusion: { ty: "P⇒(Q∨R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" }, { name: "S", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, { ty: "R⇒S" } ],
                    conclusion: { ty: "(P∨R)⇒(Q∨S)" },
                },
            ]
          },
      ]
    },
    { name: "Advanced proposition world",
      stages: [
          { name: "X",
            rules: [],
            levels: [],
          },
          { name: "⇔∧",
            rules: [ "andE", "andI", "iffI", "iffE1", "iffE2" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "P⇔P" },
                    hint: "iffHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "P⇔(P∧P)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇔Q" } ],
                    conclusion: { ty: "Q⇔P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇔Q" }, { ty: "Q⇔R" } ],
                    conclusion: { ty: "P⇔R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(P∧Q)⇔(Q∧P)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇔Q" } ],
                    conclusion: { ty: "(P∧R)⇔(Q∧R)" },
                },
            ]
          },
          { name: "⇔∨⇒",
            rules: [ "impE", "impI", "orE", "orI1", "orI2", "iffI", "iffE1", "iffE2" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "P⇔(P∨P)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(P∨Q)⇔(Q∨P)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇔Q" } ],
                    conclusion: { ty: "(P∨R)⇔(Q∨R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇔Q" } ],
                    conclusion: { ty: "(P⇒R)⇔(Q⇒R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇔Q" } ],
                    conclusion: { ty: "(R⇒P)⇔(R⇒Q)" },
                },
            ]
          },
          { name: "⊤⇔∧∨⇒",
            rules: [ "topI", "andI", "andE", "orI1", "orI2", "orE", "impI", "impE", "iffI", "iffE1", "iffE2" ],
            levels: [
                {
                    parameters: [ ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "⊤" },
                    trivial: true,
                    hint: "topHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(P⇒P)⇔⊤" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(⊤∧P)⇔P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(⊤∨P)⇔⊤" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(⊤⇒P)⇔P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(P⇒⊤)⇔⊤" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(⊤⇔P)⇔P" },
                },
            ]
          },
          { name: "⊥⊤⇔∧∨⇒",
            rules: [ "andI", "andE", "orI1", "orI2", "orE", "impI", "impE", "botE", "iffI", "iffE1", "iffE2", "topI" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "⊥" } ],
                    conclusion: { ty: "P" },
                    trivial: true,
                    hint: "botHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(⊥∧P)⇔⊥" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(⊥∨P)⇔P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(⊥⇒P)⇔⊤" },
                },
            ],
          },
          { name: "∧∨⇒",
            rules: [ "andE", "andI", "impE", "impI", "orE", "orI1", "orI2" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, { ty: "P⇒(Q⇒R)" }, ],
                    conclusion: { ty: "P⇒R" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒(P⇒Q)" }, { ty: "(P⇒Q)⇒P" } ],
                    conclusion: { ty: "Q" },
                    hint: "multiUseHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" }, ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P⇒Q)⇒R" }, { ty: "(Q⇒R)⇒P" }, { ty: "(R⇒P)⇒Q" } ],
                    conclusion: { ty: "P∧(Q∧R)" },
                    blocks: 10,
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" }, { name: "S", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒(Q∧R)" }, { ty: "(P∧Q)⇒S" }, { ty: "(P⇒S)⇒(Q⇒P)" }  ],
                    conclusion: { ty: "Q⇒(R∧S)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "((P∨(P⇒Q))⇒Q)⇒Q" },
                },
            ]
          }
      ]
    },
    { name: "Quantifier world",
      stages: [
          { name: "∀⇒⊤",
            rules: [ "impI", "impE", "allE", "allI", "topI" ],
            levels: [
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ { name: "a", ty: "A" } ],
                    hypotheses: [ { ty: "∀x∈A,P(x)" } ],
                    conclusion: { ty: "P(a)" },
                    trivial: true,
                    hint: "valueHint",
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P" } ],
                    conclusion: { ty: "∀x∈A,P" },
                    trivial: true,
                    hint: "variableHint",
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,(P⇒Q(x))" } ],
                    conclusion: { ty: "P⇒(∀x∈A,Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [{ ty: "P⇒(∀x∈A,Q(x))" } ],
                    conclusion: { ty: "∀x∈A,(P⇒Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "B", ty: "Type" }, { name: "P", ty: "A×B→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,∀y∈B,P(x,y)" } ],
                    conclusion: { ty: "∀y∈B,∀x∈A,P(x,y)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "∀x∈A,⊤" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A×A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,∀y∈A,P(x,y)" } ],
                    conclusion: { ty: "∀x∈A,P(x,x)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,(P(x)⇒Q(x))" } ],
                    conclusion: { ty: "(∀x∈A,P(x))⇒(∀x∈A,Q(x))" },
                },
            ]
          },
          { name: "∀∧∨",
            rules: [ "andI", "andE", "orI1", "orI2", "orE", "allE", "allI" ],
            levels: [
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ { name: "a", ty: "A" }, { name: "b", ty: "A" } ],
                    hypotheses: [ { ty: "∀x∈A,P(x)" } ],
                    conclusion: { ty: "P(a)∧P(b)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧(∀x∈A,Q(x))" } ],
                    conclusion: { ty: "∀x∈A,(P∧Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∨(∀x∈A,Q(x))" } ],
                    conclusion: { ty: "∀x∈A,(P∨Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,(P(x)∧Q(x))" } ],
                    conclusion: { ty: "(∀x∈A,P(x))∧(∀x∈A,Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "(∀x∈A,P(x))∧(∀x∈A,Q(x))" } ],
                    conclusion: { ty: "∀x∈A,(P(x)∧Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "(∀x∈A,P(x))∨(∀x∈A,Q(x))" } ],
                    conclusion: { ty: "∀x∈A,(P(x)∨Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" } ],
                    variables: [ { name: "a", ty: "A" } ],
                    hypotheses: [ { ty: "∀x∈A,(P∧Q(x))" } ],
                    conclusion: { ty: "P∧(∀x∈A,Q(x))" },
                },
            ]
          },
          { name: "∃⇒⊤⊥",
            rules: [ "impI", "impE", "exE", "exI", "topI", "botE" ],
            levels: [
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ { name: "a", ty: "A" } ],
                    hypotheses: [ { ty: "P(a)" } ],
                    conclusion: { ty: "∃x∈A,P(x)" },
                    trivial: true,
                    hint: "exHint",
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" } ],
                    variables: [ { name: "a", ty: "A" } ],
                    hypotheses: [ { ty: "P" } ],
                    conclusion: { ty: "∃x∈A,P" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,P" } ],
                    conclusion: { ty: "P" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "B", ty: "Type" }, { name: "P", ty: "A×B→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,∃y∈B,P(x,y)" } ],
                    conclusion: { ty: "∃y∈B,∃x∈A,P(x,y)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,(P⇒Q(x))" }, { ty: "P" } ],
                    conclusion: { ty: "∃x∈A,Q(x)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ { name: "a", ty: "A" } ],
                    hypotheses: [ { ty: "(∃x∈A,P(x))⇒Q" } ],
                    conclusion: { ty: "P(a)⇒Q" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,P(x)" } ],
                    conclusion: { ty: "∃x∈A,⊤" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,⊥" } ],
                    conclusion: { ty: "P" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A×A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,P(x,x)" } ],
                    conclusion: { ty: "∃x∈A,∃y∈A,P(x,y)" },
                },
            ]
          },
          { name: "∃∧∨",
            rules: [ "andI", "andE", "orE", "orI1", "orI2", "exE", "exI" ],
            levels: [
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,(P∧Q(x))" } ],
                    conclusion: { ty: "P∧(∃x∈A,Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧(∃x∈A,Q(x))" } ],
                    conclusion: { ty: "∃x∈A,(P∧Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,(P(x)∧Q(x))" } ],
                    conclusion: { ty: "(∃x∈A,P(x))∧(∃x∈A,Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,(P∨Q(x))" } ],
                    conclusion: { ty: "P∨(∃x∈A,Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,(P(x)∨Q(x))" } ],
                    conclusion: { ty: "(∃x∈A,P(x))∨(∃x∈A,Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ ],
                    hypotheses: [ { ty: "(∃x∈A,P(x))∨(∃x∈A,Q(x))" } ],
                    conclusion: { ty: "∃x∈A,(P(x)∨Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "A→Type" }  ],
                    variables: [ { name: "a", ty: "A" } ],
                    hypotheses: [ { ty: "P∨(∃x∈A,Q(x))" } ],
                    conclusion: { ty: "∃x∈A,(P∨Q(x))" },
                },
            ]
          },
          { name: "∃∀⇒",
            rules: [ "impI", "impE", "exE", "exI", "allI", "allE" ],
            levels: [
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "B", ty: "Type" }, { name: "P", ty: "A×B→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,∀y∈B,P(x,y)" } ],
                    conclusion: { ty: "∀y∈B,∃x∈A,P(x,y)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(∃x∈A,P(x))⇒Q" } ],
                    conclusion: { ty: "∀x∈A,(P(x)⇒Q)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,(P(x)⇒Q)" } ],
                    conclusion: { ty: "(∃x∈A,P(x))⇒Q" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,P(x)" } ],
                    conclusion: { ty: "(∃x∈A,(P(x)⇒Q))⇒Q" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,P(x)" }, { ty: "∃x∈A,(P(x)⇒Q)"} ],
                    conclusion: { ty: "Q" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,(P(x)⇒Q(x))" }, { ty: "∃x∈A,P(x)"} ],
                    conclusion: { ty: "∃x∈A,Q(x)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,(P(x)⇒Q)" } ],
                    conclusion: { ty: "(∀x∈A,P(x))⇒Q" },
                },
            ]
          },
          { name: "∃∀∧⇒⊤⊥", // ∨ not yet used
            rules: [ "andI", "andE", "orE", "orI1", "orI2", "exE", "exI", "allI", "allE", "topI", "botE", "impI", "impE" ],
            levels: [
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "B", ty: "Type" }, { name: "C", ty: "Type" }, { name: "P", ty: "A×B→Type" }, { name: "Q", ty: "B×C→Type" }, { name: "R", ty: "A×C→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,∃y∈B,P(x,y)" }, { ty: "∀y∈B,∃z∈C,Q(y,z)" }, { ty: "∀x∈A,∀y∈B,∀z∈C,((P(x,y)∧Q(y,z))⇒R(x,z))" }, ],
                    conclusion: { ty: "∀x∈A,∃z∈C,R(x,z)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,P(x)" }, { ty: "∃x∈A,Q(x)"} ],
                    conclusion: { ty: "∃x∈A,(P(x)∧Q(x))" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,P(x)" }, { ty: "∃x∈A,⊤"} ],
                    conclusion: { ty: "∃x∈A,P(x)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒∀x∈A,⊥" }, { ty: "∃x∈A,⊤"} ],
                    conclusion: { ty: "P⇒Q" },
                },
            ]
          },
      ]
    },
    { name: "Negation world",
      stages: [
          { name: "¬⇒⊥",
            rules: [ "impI", "impE", "negI", "negE", "botE" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬P" }, { ty: "P" } ],
                    conclusion: { ty: "Q" },
                    trivial: true,
                    hint: "negationHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒⊥" } ],
                    conclusion: { ty: "¬P" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬P" } ],
                    conclusion: { ty: "P⇒⊥" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P" } ],
                    conclusion: { ty: "¬¬P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" } ],
                    conclusion: { ty: "¬Q⇒¬P" },
                },
            ]
          },
          { name: "¬⇒∧∨",
            rules: [ "negI", "negE", "impE", "impI", "andI", "andE", "orI1", "orI2", "orE" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "Q∨¬P" } ],
                    conclusion: { ty: "P⇒Q" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬(P∨Q)" } ],
                    conclusion: { ty: "¬P∧¬Q" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬P∧¬Q" } ],
                    conclusion: { ty: "¬(P∨Q)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬P∨¬Q" } ],
                    conclusion: { ty: "¬(P∧Q)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∧¬Q" } ],
                    conclusion: { ty: "¬(P⇒Q)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P∨Q" }, { ty: "¬P" } ],
                    conclusion: { ty: "Q" },
                },
            ]
          },
          { name: "¬∀∃⇒∨⊤",                        // ∧, ⊥ not yet used
            rules: [ "negI", "negE", "allI", "allE", "exI", "exE", "orE", "orI1", "orI2", "orE", "topI", "impE", "impI" ],
            levels: [
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬∃x∈A,P(x)" } ],
                    conclusion: { ty: "∀x∈A,¬P(x)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∀x∈A,¬P(x)" } ],
                    conclusion: { ty: "¬∃x∈A,P(x)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "∃x∈A,¬P(x)" } ],
                    conclusion: { ty: "¬∀x∈A,P(x)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(∃x∈A,¬P(x))∨Q" } ],
                    conclusion: { ty: "(∀x∈A,P(x))⇒Q" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(∃x∈A,¬P(x))∨Q" }, { ty: "∃x∈A,⊤" } ],
                    conclusion: { ty: "∃x∈A,(P(x)⇒Q)" },
                },
            ]
          },
          { name: "¬¬₁",
            rules: [ "impI", "impE", "cnegI", "negE", "andI", "andE", "orI1", "orI2", "orE", "allI", "allE", "exI", "exE" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty : "¬¬P" } ],
                    conclusion: { ty: "P" },
                    hint: "contradictionHint",
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬Q⇒¬P" } ],
                    conclusion: { ty: "P⇒Q" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬(P⇒Q)" } ],
                    conclusion: { ty: "P∧¬Q" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬(P∧Q)" } ],
                    conclusion: { ty: "¬P∨¬Q" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "¬∀x∈A,P(x)" } ],
                    conclusion: { ty: "∃x∈A,¬P(x)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" } ],
                    conclusion: { ty: "Q∨¬P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "P∨¬P" },
                },
            ]
          },
          { name: "¬¬₂",
            rules: [ "impI", "impE", "cnegI", "negE", "andE", "andI", "orI1", "orI2", "orE", "allI", "allE", "exI", "exE" ],
            levels: [
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "((P⇒Q)⇒P)⇒P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(P⇒Q)∨(Q⇒P)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" }, { name: "S", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "P⇒Q" }, { ty: "R⇒S" } ],
                    conclusion: { ty: "(P⇒S)∨(R⇒Q)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(P∧Q)⇒R" } ],
                    conclusion: { ty: "(P⇒R)∨(Q⇒R)" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(¬P⇒P)⇒P" },
                },
                {
                    parameters: [ { name: "P", ty: "Type" }, { name: "Q", ty: "Type" }, { name: "R", ty: "Type" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(P⇒Q)∨(Q⇒R)" },
                },
                {
                    parameters: [ { name: "A", ty: "Type" }, { name: "P", ty: "A→Type" } ],
                    variables: [ ],
                    hypotheses: [ { ty : "∃x∈A,⊤" } ],
                    conclusion: { ty: "∃x∈A,(P(x)⇒∀y∈A,P(y))" },
                },
            ]
          },
      ]
    },
    { name: "Algebra world",
      stages: [
          { name: "=",
            rules: [ "alg" ],
            levels: [
                {
                    parameters: [ { name: "x", ty: "ℤ" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "x=x" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "x", ty: "ℤ" }, { name: "y", ty: "ℤ" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "x=y"} ],
                    conclusion: { ty: "y=x" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "x", ty: "ℤ" }, { name: "y", ty: "ℤ" }, { name: "z", ty: "ℤ" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "x=y"}, { ty: "y=z"} ],
                    conclusion: { ty: "x=z" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "x", ty: "ℤ" } ],
                    variables: [ ],
                    hypotheses: [ ],
                    conclusion: { ty: "(x+1)²=x²+2*x+1" },
                    trivial: true,
                },
                {
                    parameters: [ { name: "x", ty: "ℤ" }, { name: "y", ty: "ℤ" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "x=y+1" } ],
                    conclusion: { ty: "x²=y²+2*y+1" },
                    trivial: true,
                },
            ],
          },
          { name: "∨=",
            rules: [ "orI1", "orI2", "orE", "expr", "alg", "integral" ],
            levels: [
                {
                    parameters: [ { name: "x", ty: "ℤ" }, { name: "y", ty: "ℤ" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(x=y+1)∨(2*x=3−y)" } ],
                    conclusion: { ty: "2*x²−x*y−y²=5*x−2*y−3" },
                },
                {
                    parameters: [ { name: "x", ty: "ℤ" }, { name: "y", ty: "ℤ" } ],
                    variables: [ ],
                    hypotheses: [ { ty: "(x+y=1)∨(x−y=1)" } ],
                    conclusion: { ty: "x²+1=y²+2*x" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "x", ty: "ℤ" }, { name: "y", ty: "ℤ" } ],
                    hypotheses: [ { ty: "x*y=0" } ],
                    conclusion: { ty: "(x=0)∨(y=0)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "x", ty: "ℤ" } ],
                    hypotheses: [ { ty: "(x²−x−2=0)∨(x²−1=0)" } ],
                    conclusion: { ty: "(x=2)∨((x=1)∨(x=∸1))" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "x", ty: "ℤ" } ],
                    hypotheses: [ { ty: "x²=x" } ],
                    conclusion: { ty: "(x=0)∨(x−1=0)" },
                },
            ],
          },
          { name: "∣",
            rules: [ "exE", "exI", "expr", "alg" ],
            levels: [
                // 0 is not synthesizing )-:
                // {
                //     parameters: [ ],
                //     variables: [ { name: "a", ty: "ℤ" } ],
                //     hypotheses: [ ],
                //     conclusion: { ty: "∃k∈ℤ,(0=k*a)" },
                // },
                {
                    parameters: [ ],
                    variables: [ { name: "b", ty: "ℤ" } ],
                    hypotheses: [ ],
                    conclusion: { ty: "∃k∈ℤ,(b=k*1)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(b=k*a)" } ],
                    conclusion: { ty: "∃k∈ℤ,(2*b=k*a)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(b=k*a)" } ],
                    conclusion: { ty: "∃k∈ℤ,(b+a=k*a)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(b=k*a)" } ],
                    conclusion: { ty: "∃k∈ℤ,(b²=k*a²)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "c", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(b=k*a)" } ],
                    conclusion: { ty: "∃k∈ℤ,(b*c=k*a*c)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "c", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(b=k*a)" } ],
                    conclusion: { ty: "∃k∈ℤ,(b*c=k*a)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "c", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(b=k*a)" }, { ty: "∃k∈ℤ,(c=k*a)" } ],
                    conclusion: { ty: "∃k∈ℤ,(b+c=k*a)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "c", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(b=k*a)" }, { ty: "∃k∈ℤ,(c=k*b)" } ],
                    conclusion: { ty: "∃k∈ℤ,(c=k*a)" },
                },
            ],
          },
          { name: "≡",
            rules: [ "exE", "exI", "expr", "alg" ],
            levels: [
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "n", ty: "ℤ" } ],
                    hypotheses: [ ],
                    conclusion: { ty: "∃k∈ℤ,(a−a=k*n)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "n", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(a−b=k*n)" } ],
                    conclusion: { ty: "∃k∈ℤ,(b−a=k*n)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "n", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(a−b=k*n)" } ],
                    conclusion: { ty: "∃k∈ℤ,(a−b=k*(∸n))" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "c", ty: "ℤ" }, { name: "n", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(a−b=k*n)" }, { ty: "∃k∈ℤ,(b−c=k*n)" } ],
                    conclusion: { ty: "∃k∈ℤ,(a−c=k*n)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "c", ty: "ℤ" }, { name: "n", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(a−b=k*n)" } ],
                    conclusion: { ty: "∃k∈ℤ,(a*c−b*c=k*n)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" } ],
                    hypotheses: [ ],
                    conclusion: { ty: "∃k∈ℤ,(a−b=k*1)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(a−b=k*0)" } ],
                    conclusion: { ty: "a=b" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "n", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(a−b=k*n)" } ],
                    conclusion: { ty: "∃k∈ℤ,(a²−b²=k*n)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "c", ty: "ℤ" }, { name: "d", ty: "ℤ" }, { name: "n", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,(a−c=k*n)" }, { ty: "∃k∈ℤ,(b−d=k*n)" } ],
                    conclusion: { ty: "∃k∈ℤ,((a+b)−(c+d)=k*n)" },
                },
                {
                    parameters: [ ],
                    variables: [ { name: "a", ty: "ℤ" }, { name: "b", ty: "ℤ" }, { name: "c", ty: "ℤ" }, { name: "d", ty: "ℤ" }, { name: "n", ty: "ℤ" } ],
                    hypotheses: [ { ty: "∃k∈ℤ,((a+b)−(c+d)=k*n)" }, { ty: "∃k∈ℤ,(b−d=k*n)" } ],
                    conclusion: { ty: "∃k∈ℤ,(a−c=k*n)" },
                },
            ],
          },
      ],
    },
]

// Take an object that may have extra fields and strip out everything but the intrinsic properties of a level, so that we can JSON.stringify it and use it as a key into localStorage or CouchDB.
export function saveable(level) {
    return {
        parameters: level.parameters,
        variables: level.variables,
        hypotheses: level.hypotheses,
        conclusion: level.conclusion,
    }
}
